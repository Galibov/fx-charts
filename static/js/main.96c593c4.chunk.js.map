{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","parseDataChart","asyncToGenerator","regenerator_default","a","mark","_callee","series","wrap","_context","prev","next","data","chartData","length","abrupt","map","item","dataObj","x","y","Date","date","push","open","high","low","close","setState","stop","state","options","title","text","align","xaxis","type","yaxis","tooltip","enabled","bind","assertThisInitialized","inherits","createClass","key","value","prevProps","prevState","idChart","react_default","createElement","react_apexcharts_min_default","height","Component","App","getData","_ref2","_ref3","dataMin","dataMin5","dataHour","dataWeek","Promise","all","fetch","urls","min","then","json","min5","hour","week","sent","slicedToArray","t0","console","log","className","esm","src_Chart","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","concat","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.96c593c4.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ApexChart from \"react-apexcharts\";\nexport class Chart extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            options: {\n                title: {\n                    text: 'CandleStick Chart',\n                    align: 'left'\n                },\n                xaxis: {\n                    type: 'datetime'\n                },\n                yaxis: {\n                    tooltip: {\n                        enabled: true\n                    }\n                }\n            },\n            series: []\n        }\n        this.parseDataChart = this.parseDataChart.bind(this)\n\n    }\n    componentDidMount() {\n        this.parseDataChart()\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.idChart !== prevProps.idChart || this.state.series.length === prevState.series.length) {\n            this.parseDataChart()\n        }\n\n    }\n    parseDataChart = async () => {\n        let series = [{\n            data: []\n        }]\n        if (this.props.chartData.length === 0) return\n        this.props.chartData.map((item) => {\n            let dataObj = {\n                x: 0,\n                y: []\n            }\n            dataObj.x = new Date(item.date)\n            dataObj.y.push(item.open, item.high, item.low, item.close)\n            series[0].data.push(dataObj)\n            return series\n        });\n        this.setState({\n            series\n        })\n    }\n\n    render() {\n        return (\n            <div >\n                <ApexChart options={this.state.options} series={this.state.series} type=\"candlestick\" height=\"450\" />\n            </div>\n        )\n    }\n}\n\nexport default Chart\n","import React, { Component } from 'react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\n\nimport Chart from './Chart'\n\n//CSS\nimport './App.css';\nimport 'react-tabs/style/react-tabs.css';\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      dataMin: [],\n      dataMin5: [],\n      dataHour: [],\n      dataWeek: [],\n      urls: {\n        min: 'https://www.fxempire.com/api/v1/en/markets/eur-usd/chart?time=MIN_1',\n        min5: 'https://www.fxempire.com/api/v1/en/markets/eur-usd/chart?time=MIN_5',\n        hour: 'https://www.fxempire.com/api/v1/en/markets/eur-usd/chart?time=HOUR_1',\n        week: 'https://www.fxempire.com/api/v1/en/markets/eur-usd/chart?time=WEEK_1'\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.getData()\n  }\n\n  getData = async () => {\n    try {\n      let [dataMin, dataMin5, dataHour, dataWeek] = await Promise.all([\n        fetch(this.state.urls.min).then(dataMin => dataMin.json()),\n        fetch(this.state.urls.min5).then(dataMin5 => dataMin5.json()),\n        fetch(this.state.urls.hour).then(dataHour => dataHour.json()),\n        fetch(this.state.urls.week).then(dataWeek => dataWeek.json())\n      ])\n      this.setState(\n        {\n          dataMin,\n          dataMin5,\n          dataHour,\n          dataWeek\n        });\n\n    }\n    catch (err) {\n      console.log(err);\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"Fxtitle\">FX CHARTS</h1>\n        <Tabs>\n          <TabList>\n            <Tab>1 Min</Tab>\n            <Tab>5 Min</Tab>\n            <Tab>1 Hour</Tab>\n            <Tab>1 Week</Tab>\n          </TabList>\n\n          <TabPanel>\n            <Chart idChart=\"min\" chartData={this.state.dataMin} />\n          </TabPanel>\n          <TabPanel>\n            <Chart idChart=\"min5\" chartData={this.state.dataMin5} />\n          </TabPanel>\n          <TabPanel>\n            <Chart idChart=\"hour\" chartData={this.state.dataHour} />\n          </TabPanel>\n          <TabPanel>\n            <Chart idChart=\"week\" chartData={this.state.dataMin} />\n          </TabPanel>\n\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register()\n"],"sourceRoot":""}